name: Kotlin benchmarks

on:
  workflow_dispatch:

jobs:
  get-inputs:
    uses: ephemient/aoc2022/.github/workflows/get-inputs.yml@main
    secrets:
      SESSION: ${{ secrets.SESSION }}

  jmh-visualizer:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          repository: jzillmann/jmh-visualizer
      - uses: actions/setup-node@v3
        with:
          node-version: 16.18.1
          cache: npm
      - run: npm install
      - run: npm run providedZip
      - uses: actions/upload-artifact@v3
        with:
          name: jmh-visualizer
          path: jmh-visualizer.zip

  build:
    needs: [ get-inputs ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: inputs
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - uses: actions/cache@v3
        with:
          key: kt-${{ runner.os }}-konan-${{ hashFiles('**/*.gradle*') }}-bench
          restore-keys: |
            kt-${{ runner.os }}-konan-${{ hashFiles('**/*.gradle*') }}-
            kt-${{ runner.os }}-konan-
          path: ~/.konan
      - uses: gradle/gradle-build-action@v2
        with:
          arguments: :assembleBenchmarks
          build-root-directory: kt
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            kt/build/benchmarks/*/jars/*.jar
            kt/build/benchmarks/*/classes/*.kexe

  graalvm-build:
    needs: [ get-inputs ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: inputs
      - uses: graalvm/setup-graalvm@v1
        with:
          version: latest
          java-version: 17
          components: native-image
          cache: gradle
      - uses: gradle/gradle-build-action@v2
        with:
          arguments: :graalvm:nativeJmhCompile
          build-root-directory: kt
      - uses: actions/upload-artifact@v3
        with:
          name: native-image
          path: |
            kt/graalvm/build/native/nativeJmhCompile/*
            !**/*.txt

  run:
    needs: [ get-inputs, jmh-visualizer, build, graalvm-build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: gh-docs
      - uses: actions/download-artifact@v3
        with:
          name: inputs
      - uses: actions/download-artifact@v3
        with:
          name: jmh-visualizer
      - uses: actions/download-artifact@v3
        with:
          name: build
      - uses: actions/download-artifact@v3
        with:
          name: native-image
          path: native-image
      - run: rm -rf jmh-visualizer
      - run: unzip -d jmh-visualizer jmh-visualizer.zip
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      - name: Run JVM benchmarks
        run: |
          cat >config <<EOF
          name:jvmBench
          reportFile:jvmBench.json
          traceFormat:text
          warmups:1
          iterationTime:1
          outputTimeUnit:SECONDS
          EOF
          java -cp jvmBench/jars/*.jar kotlinx.benchmark.jvm.JvmBenchmarkRunnerKt config
      - name: Run Kotlin/Native benchmarks
        run: |
          cat >config <<EOF
          name:linuxX64Bench
          reportFile:linuxX64Bench.json
          traceFormat:text
          warmups:1
          iterationTime:1
          outputTimeUnit:SECONDS
          EOF
          chmod +x linuxX64Bench/classes/*.kexe
          mkdir descriptions outputs
          linuxX64Bench/classes/*.kexe config --list /dev/null descriptions
          descriptions=(descriptions/*.txt)
          for i in "${descriptions[@]}"; do
            aoc2022_data=. linuxX64Bench/classes/*.kexe config --benchmark /dev/null "$i" "${i%.txt}.out"
          done
          for ((i=0; i<${#descriptions[*]}; i++)); do
            [[ i -eq 0 ]] || echo
            printf '%s: ' "${descriptions[i]}"
            cat "${descriptions[i]%.txt}.out"
          done >results.txt
          aoc2022_data=. linuxX64Bench/classes/*.kexe config --store-results /dev/null results.txt
      - name: Run Graal native-image benchmarks
        run: |
          chmod +x native-image/*
          native-image/* -f 0 -r 1 -w 1 -wi 0 -rf json -rff graalBench.json
      - name: Create provided.js
        run: |
          shopt -s failglob
          names=() jsonargs=()
          for file in *.json; do
            name=${file##*/}
            name=${name%.*}
            names+=("$name")
            jsonargs+=(--slurpfile "$name" "$file")
          done
          cat >jmh-visualizer/provided.js <<EOF
          // provided.js - generated by ${{ github.repository }}/${{ github.workflow }}, $(date +'%Y-%m-%d %H:%M:%S.%N')

          var providedBenchmarks = $(jq --null-input --compact-output '$ARGS.positional|unique' --args "${names[@]}");

          var providedBenchmarkStore = $(jq --null-input '$ARGS.named|map_values(.[0])' "${jsonargs[@]}");
          EOF
      - uses: EndBug/add-and-commit@v9
        with:
          add: jmh-visualizer
          message: 'kotlinx.benchmark ${{ github.sha }}'
