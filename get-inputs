#!/usr/bin/env python3
import argparse
from datetime import datetime, timedelta, tzinfo
from pathlib import Path
import shutil
import sys
import time
from urllib.error import HTTPError
from urllib.request import urlopen, Request


class TZ(tzinfo):

    def utcoffset(self, dt):
        return timedelta(hours=-5) + self.dst(dt)

    def dst(self, dt):
        return timedelta(0)


def main():
    terminal_output = sys.stdout if sys.stdout.isatty(
    ) else sys.stderr if sys.stderr.isatty() else None

    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-n", "--dry-run", action='store_true')
    group.add_argument("-o", "--overwrite", action='store_true', dest='force')
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-s", "--session")
    group.add_argument("-S",
                       "--session-file",
                       metavar='FILE',
                       type=argparse.FileType())
    parser.add_argument("-y", "--year", type=int, default=2022)
    parser.add_argument("days", metavar='DAY', type=int, nargs='*')
    args = parser.parse_args()

    dry_run, force, session = args.dry_run, args.force, args.session
    if not session:
        session_file = args.session_file
        if not session_file:
            session_file = open(Path.home() / '.aocrc')
        with session_file:
            session = session_file.read().strip()

    year, days = args.year, args.days
    base = datetime(year, 12, 1, 0, 0, 0, 0, TZ())
    if days:
        days = sorted(set(days))
    else:
        days = (datetime.now(TZ()) - base).days + 1
        days = range(1, max(0, min(25, days)))

    for day in days:
        file = f"day{day}.txt"
        if not force and Path(file).exists():
            print(f"{file} already exists")
            continue
        if not dry_run:
            target = base + timedelta(days=day - 1)
            while True:
                now = datetime.now(TZ())
                if now >= target:
                    break
                delta = target - now
                message = f"{file} available in {delta}"
                if terminal_output:
                    print(message, end='', file=terminal_output, flush=True)
                    if delta > timedelta(hours=2):
                        delta = delta % timedelta(hours=1)
                    elif delta > timedelta(minutes=2):
                        delta = delta % timedelta(minutes=1)
                    elif delta > timedelta(seconds=2):
                        delta = delta % timedelta(seconds=1)
                    elif delta > timedelta(milliseconds=20):
                        delta = delta % timedelta(milliseconds=10)
                    time.sleep(delta.total_seconds())
                    print('\033[2K\r',
                          end='',
                          file=terminal_output,
                          flush=True)
                else:
                    print(message)
                    time.sleep(delta.total_seconds())
        url = f"https://www.adventofcode.com/{year}/day/{day}/input"
        print(f"{file} = {url}")
        if dry_run:
            continue
        request = Request(url, headers={"Cookie": f"session={session}"})
        response = urlopen(request)
        if response.status != 200:
            raise HTTPError(response.url, response.code, response.msg,
                            response.headers, None)
        with response:
            with open(file, 'wb') as f:
                shutil.copyfileobj(response, f)


if __name__ == "__main__":
    main()
